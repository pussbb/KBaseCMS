// Generated by CoffeeScript 1.3.3
(function() {
  var ArrayProto, IS, ObjProto, defaultOptions, hasOwn, root, toString;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  ObjProto = Object.prototype;

  ArrayProto = Array.prototype;

  toString = ObjProto.toString;

  hasOwn = ObjProto.hasOwnProperty;

  IS = (function() {

    function IS() {}

    IS.string = function(s) {
      return (typeof s === 'string') || s instanceof String;
    };

    IS.object = function(o) {
      return o === Object(o);
    };

    IS.number = function(n) {
      return (typeof n === 'number') || n instanceof Number;
    };

    IS.bool = function(b) {
      return b === !!b || b instanceof Boolean;
    };

    IS.fn = function(f) {
      return typeof f === 'function';
    };

    IS.array = ArrayProto.isArray || function(a) {
      return toString.call(a) === '[object Array]';
    };

    IS.regex = function(r) {
      return !!(r && r.test && r.exec && (r.ignoreCase || r.ignoreCase === false));
    };

    IS.element = function(e) {
      if (typeof HTMLElement !== 'undefined') {
        return e instanceof HTMLElement;
      } else {
        return !!(e && e.nodeType === 1);
      }
    };

    IS.numeric = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

    IS.hash = function(h) {
      var key;
      if (!o || typeof o !== 'object' || this.element(o) || (typeof window !== 'undefined' && o === window) || (o.constructor && !hasOwn.call(o, 'constructor') && !hasOwn.call(o.constructor.prototype, 'isPrototypeOf'))) {
        return false;
      }
      for (key in o) {
        key;

      }
      return key === void 0 && hasOwn.call(o, key);
    };

    IS.index_of = function(arr, val) {
      var i, key, _i, _len;
      if (ArrayProto.indexOf) {
        return arr.indexOf(val);
      } else {
        for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
          key = arr[i];
          if (key === val) {
            return i;
          }
        }
        return -1;
      }
    };

    IS.inside = function(container, val) {
      var key;
      if (this.array(container)) {
        return this.index_of(container, val) > -1;
      } else if (this.object(container)) {
        for (key in container) {
          if (hasOwn.call(container, prop) && container[prop] === val) {
            return true;
          }
        }
      }
      return false;
    };

    IS.set = function(v) {
      return (v != null) && v !== 0.;
    };

    IS.empty = function(container) {
      var x;
      if (this.array(constainer)) {
        return container.length === 0;
      }
      if (this.object(constainer)) {
        if (this.fn(container.valueOf && this.object(container.valueOf()))) {
          return this.empty(container.valueOf());
        }
        for (x in container) {
          if (hasOwn.call(container, x)) {
            return false;
          }
        }
        return true;
      } else {
        return !container;
      }
    };

    return IS;

  })();

  root.IS = IS;

  $(function() {
    var TWidget;
    TWidget = (function() {

      function TWidget(elem, options) {
        var widgetTitle;
        this.elem = elem;
        options = $.extend({}, $.fn.tWidget.defaults, options);
        widgetTitle = $('<div>').addClass('widget-title');
        if (options.icon) {
          widgetTitle.append("<span class=\"icon\">" + options.icon + "</span>");
        }
        widgetTitle.append("<h5>" + options.title + "</h5>");
        elem.wrap('<div class="widget-content" />');
        this.content = elem.parent();
        this.content.wrap('<div class="widget-box" />');
        this.widget = this.content.parent();
        this.widget.prepend(widgetTitle);
      }

      TWidget.prototype.remove = function() {
        this.widget.replaceWith(this.elem);
        this.elem.data('TWidget', null);
        return delete this;
      };

      return TWidget;

    })();
    $.fn.tWidget = function(options) {
      return this.each(function(key, value) {
        var data, self;
        self = $(this);
        data = self.data('TWidget');
        if (!data) {
          data = new TWidget(self, options);
          return self.data('TWidget', data);
        } else {
          if (IS.string(options)) {
            return data[options]();
          }
        }
      });
    };
    return $.fn.tWidget.defaults = {
      title: 'widget',
      url: null,
      icon: null
    };
  });

  /*
    script ....
    based on twitter bootstrap progress bars styles
  */


  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var defaultOptions;
    defaultOptions = {
      clearContent: true,
      active: true,
      striped: true,
      type: null,
      min: 0,
      max: 100,
      step: 10,
      timeout: 1000
    };
    return $.fn.pseudoAjaxLoadingProgress = function(options) {
      var currentVal, interval, progressBar, progressContainer;
      if (options == null) {
        options = {};
      }
      options = $.extend(true, defaultOptions, options);
      if (options.clearContent) {
        $(this).html('');
      }
      progressContainer = $('<div></div>').addClass('progress');
      progressBar = $('<div></div>').addClass('bar').css('width', "" + options.min + "%");
      if (options.active) {
        progressContainer.addClass('active');
      }
      if (options.striped) {
        progressContainer.addClass('progress-striped');
      }
      progressContainer.append(progressBar);
      $(this).append(progressContainer);
      currentVal = options.min;
      return interval = setInterval(function() {
        if (!progressBar.length) {
          clearInterval(interval);
        }
        currentVal = currentVal + options.step;
        if (currentVal > options.max) {
          currentVal = options.min;
        }
        return progressBar.css('width', "" + currentVal + "%");
      }, options.timeout);
    };
  });

  defaultOptions = {
    text: 'Oops some error occured',
    closable: true,
    append: false,
    type: 'alert-error'
  };

  $(function() {
    return $.fn.inlineAlert = function(options) {
      var alert, close;
      if (options == null) {
        options = {};
      }
      options = $.extend(defaultOptions, options);
      alert = $('<div></div>').addClass('alert');
      alert.addClass(options.type);
      if (options.closable) {
        close = $('<a></a>').addClass('close');
        close.attr('data-dismiss', 'alert');
        close.text('x');
        alert.append(close);
      }
      alert.append(options.text);
      if (options.append) {
        return $(this).append(alert);
      } else {
        return $(this).html(alert);
      }
    };
  });

}).call(this);
