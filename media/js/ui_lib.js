// Generated by CoffeeScript 1.6.1
(function() {
  var ArrayProto, IS, ObjProto, ckeditor_config, defaultOptions, hasOwn, root, toString;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  ObjProto = Object.prototype;

  ArrayProto = Array.prototype;

  toString = ObjProto.toString;

  hasOwn = ObjProto.hasOwnProperty;

  IS = (function() {

    function IS() {}

    IS.string = function(s) {
      return (typeof s === 'string') || s instanceof String;
    };

    IS.object = function(o) {
      return o === Object(o);
    };

    IS.number = function(n) {
      return (typeof n === 'number') || n instanceof Number;
    };

    IS.bool = function(b) {
      return b === !!b || b instanceof Boolean;
    };

    IS.fn = function(f) {
      return typeof f === 'function';
    };

    IS.array = ArrayProto.isArray || function(a) {
      return toString.call(a) === '[object Array]';
    };

    IS.regex = function(r) {
      return !!(r && r.test && r.exec && (r.ignoreCase || r.ignoreCase === false));
    };

    IS.element = function(e) {
      if (typeof HTMLElement !== 'undefined') {
        return e instanceof HTMLElement;
      } else {
        return !!(e && e.nodeType === 1);
      }
    };

    IS.numeric = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

    IS.hash = function(h) {
      var key;
      if (!o || typeof o !== 'object' || this.element(o) || (typeof window !== 'undefined' && o === window) || (o.constructor && !hasOwn.call(o, 'constructor') && !hasOwn.call(o.constructor.prototype, 'isPrototypeOf'))) {
        return false;
      }
      for (key in o) {
        key;
      }
      return key === void 0 && hasOwn.call(o, key);
    };

    IS.index_of = function(arr, val) {
      var i, key, _i, _len;
      if (ArrayProto.indexOf) {
        return arr.indexOf(val);
      } else {
        for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
          key = arr[i];
          if (key === val) {
            return i;
          }
        }
        return -1;
      }
    };

    IS.inside = function(container, val) {
      var key;
      if (this.array(container)) {
        return this.index_of(container, val) > -1;
      } else if (this.object(container)) {
        for (key in container) {
          if (hasOwn.call(container, prop) && container[prop] === val) {
            return true;
          }
        }
      }
      return false;
    };

    IS.set = function(v) {
      return (v != null) && v !== 0.;
    };

    IS.empty = function(container) {
      var x;
      if (this.array(container)) {
        return container.length === 0;
      }
      if (this.object(container)) {
        if (this.fn(container.valueOf && this.object(container.valueOf()))) {
          return this.empty(container.valueOf());
        }
        for (x in container) {
          if (hasOwn.call(container, x)) {
            return false;
          }
        }
        return true;
      } else {
        return !container;
      }
    };

    return IS;

  })();

  root.IS = IS;

  $(function() {
    var TWidget;
    TWidget = (function() {

      function TWidget(elem, options) {
        var widgetTitle;
        this.elem = elem;
        options = $.extend({}, $.fn.tWidget.defaults, options);
        widgetTitle = $('<div>').addClass('widget-title');
        if (options.icon) {
          widgetTitle.append("<span class=\"icon\">" + options.icon + "</span>");
        }
        widgetTitle.append("<h5>" + options.title + "</h5>");
        if (options.wrap) {
          elem.wrap('<div class="widget-content" />');
          this.content = elem.parent();
        } else {
          elem.append('<div class="widget-content" />');
          this.content = $('div.widget-content', elem);
        }
        this.content.wrap('<div class="widget-box" />');
        this.widget = this.content.parent();
        this.widget.prepend(widgetTitle);
      }

      TWidget.prototype.remove = function() {
        this.widget.replaceWith(this.elem);
        this.elem.data('TWidget', null);
        return delete this;
      };

      TWidget.prototype.show = function() {
        return widget.show();
      };

      TWidget.prototype.hide = function() {
        return widget.hide();
      };

      return TWidget;

    })();
    $.fn.tWidget = function(options) {
      return this.each(function(key, value) {
        var data, self;
        self = $(this);
        data = self.data('TWidget');
        if (!data) {
          data = new TWidget(self, options);
          return self.data('TWidget', data);
        } else {
          if (IS.string(options)) {
            return data[options]();
          }
        }
      });
    };
    return $.fn.tWidget.defaults = {
      title: 'widget',
      url: null,
      icon: null,
      wrap: true
    };
  });

  $(function() {
    var TDialog;
    TDialog = (function() {

      function TDialog(elem, options) {
        var footer, modalHeader;
        this.elem = elem;
        options = $.extend({}, $.fn.tDialog.defaults, options);
        this.modal = $('<div>').attr('id', 'modal-' + new Date().getTime());
        this.modal.addClass('modal');
        $('body').append(this.modal);
        modalHeader = $('<div>').addClass('modal-header');
        modalHeader.append($('<button>').attr('type', 'button').hide().addClass('close').attr('area-hidden', 'true').text('x'));
        modalHeader.append("<h3>" + options.title + "</h3>");
        this.modal.append(modalHeader);
        modalHeader.on('click', 'button.close', {
          originElem: this.elem
        }, function(e) {
          return e.data.originElem.tDialog('close');
        });
        modalHeader = null;
        this.content = $('<div>').addClass('modal-body');
        this.modal.append(this.content);
        if (!IS.empty(options.content)) {
          this.content.html(options.content);
        }
        this.footer = $('<div>').addClass('modal-footer');
        if (IS.array(options.buttons)) {
          footer = this.footer;
          $(options.buttons).each(function() {
            var button, onclick;
            button = $('<button>').addClass('btn').text(this.title);
            onclick = this.fn;
            button.on('click', function() {
              return onclick();
            });
            return footer.append(button);
          });
        }
        this.modal.append(this.footer);
        this.modal.modal('show');
        options = null;
      }

      TDialog.prototype.close = function() {
        this.modal.modal('hide');
        this.elem.data('tDialog', null);
        this.modal.remove();
        return delete this;
      };

      TDialog.prototype.hideButtons = function() {
        return this.footer.hide();
      };

      TDialog.prototype.showButtons = function() {
        return this.footer.show();
      };

      TDialog.prototype.showProccess = function() {
        this.contentHtml = this.content.html();
        return this.content.pseudoAjaxLoadingProgress({
          timeout: 500
        });
      };

      TDialog.prototype.hideProccess = function(data) {
        if (data == null) {
          data = null;
        }
        if (!IS.empty(data)) {
          this.content.html(data);
        } else {
          this.conten.html(this.contentHtml);
          this.contentHtml = null;
        }
        return $('button.close:first', this.modal).show();
      };

      return TDialog;

    })();
    $.fn.tDialog = function(options, optionData) {
      if (optionData == null) {
        optionData = null;
      }
      return this.each(function(key, value) {
        var data, self;
        self = $(this);
        data = self.data('tDialog');
        if (!data) {
          data = new TDialog(self, options);
          return self.data('tDialog', data);
        } else {
          if (IS.string(options)) {
            return data[options](optionData);
          }
        }
      });
    };
    return $.fn.tDialog.defaults = {
      title: 'widget',
      content: null,
      url: null,
      buttons: []
    };
  });

  $(function() {
    $.fn.tConfirm = function(options) {
      return this.each(function() {
        var self;
        self = $(this);
        options = $.extend(true, $.fn.tConfirm.defaults, options);
        return self.tDialog({
          title: options.title,
          content: options.content,
          buttons: [
            {
              title: options.confirm.title,
              fn: function() {
                if (IS.fn(options.confirm.fn)) {
                  options.confirm.fn(self);
                }
                if (!self.attr('href')) {
                  self.tDialog('close');
                }
                self.tDialog('showProccess');
                self.tDialog('hideButtons');
                return $.ajax({
                  url: self.attr('href'),
                  type: 'DELETE',
                  success: function(data) {
                    var parent;
                    if (!IS.empty(data)) {
                      self.tDialog('hideProccess', 'Opps some error ocured');
                    }
                    self.tDialog('close');
                    parent = self.parent();
                    self.trigger('itemremoved');
                    switch (new String(parent.prop("tagName")).toLowerCase()) {
                      case 'td':
                        return parent.closest('tr').remove();
                      case 'li':
                        if (parent.hasClass('can_remove')) {
                          return parent.remove();
                        }
                        break;
                    }
                  },
                  error: function() {
                    return self.tDialog('hideProccess', 'Opps some error ocured');
                  }
                });
              }
            }, {
              title: options.reject.title,
              fn: function() {
                self.tDialog('close');
                if (IS.fn(options.reject.fn)) {
                  return options.reject.fn(self);
                }
              }
            }
          ]
        });
      });
    };
    $.fn.tConfirm.defaults = {
      title: 'confirm dialog',
      content: 'Are you sure to do it?',
      confirm: {
        title: 'Yes',
        fn: null
      },
      reject: {
        title: 'No',
        fn: null
      }
    };
    return $(document).on('click', '[data-toggle="confirm"]', {}, function(e) {
      var self;
      e.stopImmediatePropagation();
      e.preventDefault();
      self = $(this);
      return self.tConfirm({
        title: self.data('title') || self.html(),
        content: self.data('content') || $.fn.tConfirm.defaults.content
      });
    });
  });

  /*
    script ....
    based on twitter bootstrap progress bars styles
  */


  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var defaultOptions;
    defaultOptions = {
      clearContent: true,
      active: true,
      striped: true,
      type: null,
      min: 0,
      max: 100,
      step: 10,
      timeout: 1000
    };
    return $.fn.pseudoAjaxLoadingProgress = function(options) {
      var currentVal, interval, progressBar, progressContainer;
      if (options == null) {
        options = {};
      }
      options = $.extend(true, defaultOptions, options);
      if (options.clearContent) {
        $(this).html('');
      }
      progressContainer = $('<div></div>').addClass('progress');
      progressBar = $('<div></div>').addClass('bar').css('width', "" + options.min + "%");
      if (options.active) {
        progressContainer.addClass('active');
      }
      if (options.striped) {
        progressContainer.addClass('progress-striped');
      }
      progressContainer.append(progressBar);
      $(this).append(progressContainer);
      currentVal = options.min;
      return interval = setInterval(function() {
        if (!progressBar.length) {
          clearInterval(interval);
        }
        currentVal = currentVal + options.step;
        if (currentVal > options.max) {
          currentVal = options.min;
        }
        return progressBar.css('width', "" + currentVal + "%");
      }, options.timeout);
    };
  });

  defaultOptions = {
    text: 'Oops some error occured',
    closable: true,
    append: false,
    type: 'alert-error',
    onClose: null
  };

  $(function() {
    return $.fn.inlineAlert = function(options) {
      var alert, close;
      if (options == null) {
        options = {};
      }
      options = $.extend(defaultOptions, options);
      alert = $('<div></div>').addClass('alert');
      alert.addClass(options.type);
      if (options.closable) {
        close = $('<a></a>').addClass('close');
        close.attr('data-dismiss', 'alert');
        close.text('x');
        alert.append(close);
      }
      alert.append(options.text);
      if (options.append) {
        $(this).append(alert);
      } else {
        $(this).html(alert);
      }
      if (IS.fn(options.onClose)) {
        return close.click(options.onClose);
      }
    };
  });

  ckeditor_config = {
    language: document.documentElement.lang || 'en',
    width: '76%',
    height: 300,
    autoGrow_maxHeight: 300,
    autoGrow_minHeight: 500
  };

  $(function() {
    var formControl;
    formControl = (function() {

      function formControl(container, options) {
        var _this = this;
        this.container = container;
        this.init();
        this.container.on('click', 'button.cancel-btn', function(e) {
          e.preventDefault();
          if (IS.fn(options.onCancel)) {
            return options.onCancel(this.container);
          }
        });
        $(this.container).on('click', 'button[type="submit"]', function(e) {
          var form, _ref;
          e.preventDefault();
          _this.deleteCKEditor();
          form = $('form:first', _this.container);
          container = _this.container;
          return $.ajax({
            url: form.attr('action'),
            type: ((_ref = form.attr('method')) != null ? _ref.toUpperCase() : void 0) || 'POST',
            data: form.serialize(),
            success: function(data) {
              if (!data.length) {
                if (IS.fn(options.onSuccess)) {
                  return options.onSuccess(container);
                }
              } else {
                container.html(data);
                container.formControll('init');
                if (IS.fn(options.onLoad)) {
                  return options.onLoad(container);
                }
              }
            },
            error: function() {
              container.formControll('init');
              if (IS.fn(options.onLoad)) {
                return options.onLoad(container);
              }
            },
            complete: function() {
              container.formControll('init');
              if (IS.fn(options.onLoad)) {
                return options.onLoad(container);
              }
            }
          });
        });
      }

      formControl.prototype.deleteCKEditor = function() {
        if (!CKEDITOR) {
          return;
        }
        return $('textarea.editor', this.container).each(function() {
          var editor;
          editor = $(this).data('editor');
          if (!editor) {
            return;
          }
          editor.updateElement();
          editor.destroy();
          return $(this).data('editor', null);
        });
      };

      formControl.prototype.destroy = function() {
        $(this.container).off('click', 'button.cancel-btn');
        this.cancelButton = null;
        this.deleteCKEditor();
        $(this.container).off('click', 'button[type="submit"]');
        this.container.data('formControl', null);
        $('.nav-tabs', this.container).off('shown');
        this.container = null;
        return delete this;
      };

      formControl.prototype.init = function() {
        this.cancelButton = $('button.cancel-btn', this.container);
        if (!this.cancelButton.length) {
          this.cancelButton = $('<button>').addClass('btn btn-warning cancel-btn');
          this.cancelButton.attr('type', 'button').text('Cancel');
          $('.form-actions', this.container).append(this.cancelButton);
        }
        if (CKEDITOR) {
          return $('textarea.editor', this.container).each(function() {
            var editor;
            if ($(this).data('editor')) {
              return;
            }
            editor = CKEDITOR.replace(this, ckeditor_config);
            return $(this).data('editor', editor);
          });
        }
      };

      return formControl;

    })();
    $.fn.formControll = function(options) {
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('formControl');
        if (!data) {
          data = new formControl($this, options);
          $this.data('formControl', data);
        }
        if (IS.string(options)) {
          return data[options]();
        }
      });
    };
    return $.fn.formControll.defaults = {
      onCancel: null,
      onSubmit: null,
      onSuccess: null,
      onLoad: null
    };
  });

}).call(this);
